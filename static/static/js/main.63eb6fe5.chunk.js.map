{"version":3,"sources":["components/BaseLayout.js","components/ShowTypes.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["BaseLayout","className","this","props","children","Component","ShowTypes","types","data","forEach","item","includes","type","push","getTypes","typeCount","counts","_","reduce","totals","currentItem","get","map","currentType","getTypeCount","chartData","labels","datasets","label","backgroundColor","index","key","options","title","display","fontSize","legend","position","Home","state","currentlySelectedType","getData","axios","then","res","setState","handleClick","shuffledData","shuffle","id","onClick","React","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAEqBA,E,iLAGb,OACI,6BACI,yBAAKC,UAAW,UACZ,+FAIJ,6BACKC,KAAKC,MAAMC,UAGhB,yBAAKH,UAAU,UACX,kE,GAfoBI,a,0CC2FzBC,MAxFf,SAAoBH,GAGhB,IAgDII,EAhDW,WACX,IAAIA,EAAQ,GAOZ,OANaJ,EAAMK,KACdC,SAAQ,SAAAC,GACLH,EAAMI,SAASD,EAAKE,OACpBL,EAAMM,KAAKH,EAAKE,SAGjBL,EAwCCO,GACRC,EAtCe,WACf,IAAIP,EAAOL,EAAMK,KACbQ,EAASC,IAAEC,OAAOV,GAAM,SAACW,EAAQC,GAAiB,IAC5CR,EAASQ,EAATR,KAEN,OADAO,EAAOP,GAAQK,IAAEI,IAAIF,EAAQP,EAAM,GAAK,EACjCO,IACR,IAEH,OAAQF,IAAEK,IAAIf,GAAO,SAAAgB,GAAW,OAAIP,EAAOO,MA8B/BC,GACZC,EA3BQ,CACJC,OAAQnB,EACRoB,SAAS,CACL,CACIC,MAAO,QACPpB,KAAMO,EACNc,gBAAiB,CACb,0BACA,yBACA,0BACA,0BACA,2BACA,uBACA,yBACA,yBACA,yBACA,yBACA,wBACA,6BAYpB,OACI,6BACI,yBAAK5B,UAAW,UACZ,4BACI,qCACEM,EAAMe,KAAK,SAACV,EAAKkB,GAAN,OACT,wBAAIC,IAAOD,GAAQlB,QAM/B,yBAAKX,UAAU,SACX,kBAAC,IAAD,CACIO,KAAMiB,EACNO,QAAS,CACLC,MAAM,CACFC,SAAQ,EACRC,SAAS,IAEbC,OAAO,CACHF,SAAQ,EACRG,SAAS,eChCtBC,E,2MA5CXC,MAAQ,CACJ/B,KAAM,GACNgC,sBAAuB,I,EAO3BC,QAAU,WACNC,IAAMrB,IAAI,mBACLsB,MAAK,SAAAC,GACF,IAAIpC,EAAOoC,EAAIpC,KACf,EAAKqC,SAAS,CAACrC,a,EAI3BsC,YAAc,SAAC1B,GACX,IAAIoB,EAAwBpB,EAAYR,KACxC,EAAKiC,SAAS,CAACL,2B,mFAbftC,KAAKuC,Y,+BAgBJ,IAAD,SACkCvC,KAAKqC,MAArC/B,EADF,EACEA,KAAMgC,EADR,EACQA,sBACRO,EAAe9B,IAAE+B,QAAQxC,GAC7B,OACI,yBAAKP,UAAW,OACZ,kBAAC,EAAD,CAAWO,KAAOA,IAElB,yBAAKP,UAAW,aACV8C,EAAazB,KAAI,SAAAZ,GAAI,OACnB,yBAAKqB,IAAKrB,EAAKuC,GAAIhD,UAAS,eAAWuC,IAAyB9B,EAAKE,KAAO,gBAAkB,IAAMsC,QAAS,kBAAK,EAAKJ,YAAYpC,KAC/H,4BAAMA,EAAKE,MACX,4BAAMF,EAAKuC,c,GAlChBE,IAAM9C,WCYV+C,MAVf,WACE,OACM,kBAAC,IAAD,KACE,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAajB,OCA/BkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.63eb6fe5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class BaseLayout extends Component {\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <nav className= 'navbar'>\r\n                    <h1>Welcome, please click an item to find others of the same type!</h1>\r\n\r\n                </nav>\r\n\r\n                <div>\r\n                    {this.props.children}\r\n                </div>\r\n\r\n                <div className='footer'>\r\n                    <p> @ 2020 Copyright Sufan Huang</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Pie } from 'react-chartjs-2'\r\nimport _ from 'lodash'\r\n\r\n\r\nfunction ShowTypes (props) {\r\n\r\n\r\n    let getTypes = ()=>{\r\n        let types = []\r\n        let  data  = props.data\r\n        data.forEach(item => {\r\n            if(!types.includes(item.type)){\r\n                types.push(item.type)\r\n            }\r\n        })\r\n        return types\r\n    }\r\n\r\n    let getTypeCount = () =>{\r\n        let data = props.data\r\n        let counts = _.reduce(data, (totals, currentItem) => {\r\n            let { type } = currentItem\r\n            totals[type] = _.get(totals, type, 0) + 1\r\n            return totals\r\n        }, {})\r\n\r\n        return  _.map(types, currentType => counts[currentType])\r\n    }\r\n\r\n    let getChartData = ()=>{\r\n        return  {\r\n            labels: types,\r\n            datasets:[\r\n                {\r\n                    label: 'Count',\r\n                    data: typeCount,\r\n                    backgroundColor: [\r\n                        'rgba(255, 99, 132, 0.6)',\r\n                        'rgba(54, 62, 235, 0.6)',\r\n                        'rgba(255, 206, 86, 0.6)',\r\n                        'rgba(75, 192, 192, 0.6)',\r\n                        'rgba(153, 102, 255, 0.6)',\r\n                        'rgba(5, 59, 64, 0.6)',\r\n                        'rgba(55, 99, 132, 0.6)',\r\n                        'rgba(255, 29, 32, 0.6)',\r\n                        'rgba(54, 162, 35, 0.6)',\r\n                        'rgba(15, 250, 16, 0.6)',\r\n                        'rgba(75, 92, 92, 0.6)',\r\n                        'rgba(153, 02, 55, 0.6)'\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    let types = getTypes()\r\n    let typeCount = getTypeCount()\r\n    let chartData = getChartData()\r\n\r\n\r\n    return(\r\n        <div>\r\n            <nav className= 'header'>\r\n                <ul>\r\n                    <li>Types</li>\r\n                    { types.map( (type,index)=>(\r\n                        <li key = {index}>{type}</li>\r\n                    ))}\r\n                </ul>\r\n            </nav>\r\n\r\n\r\n            <div className='chart'>\r\n                <Pie\r\n                    data={chartData}\r\n                    options={{\r\n                        title:{\r\n                            display:true,\r\n                            fontSize:25\r\n                        },\r\n                        legend:{\r\n                            display:true,\r\n                            position:'right'\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ShowTypes\r\n","import React from 'react'\r\nimport axios from 'axios'\r\nimport _ from 'lodash'\r\nimport ShowTypes from './ShowTypes'\r\n\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        data: [],\r\n        currentlySelectedType: ''\r\n    }\r\n\r\n    componentDidMount (){\r\n        this.getData()\r\n\r\n    }\r\n    getData = ()=>{\r\n        axios.get('express_backend')\r\n            .then(res=>{\r\n                let data = res.data\r\n                this.setState({data})\r\n            })\r\n    }\r\n\r\n    handleClick = (currentItem)=> {\r\n        let currentlySelectedType = currentItem.type\r\n        this.setState({currentlySelectedType})\r\n    }\r\n\r\nrender(){\r\n    let { data, currentlySelectedType } = this.state\r\n    let shuffledData = _.shuffle(data)\r\n    return(\r\n        <div className= \"app\">\r\n            <ShowTypes data ={data}/>\r\n\r\n            <div className= 'container'>\r\n                { shuffledData.map(item =>(\r\n                    <div key={item.id} className={`item ${ currentlySelectedType===(item.type)? 'type-selected' : ''}`} onClick={() =>this.handleClick(item)}>\r\n                        <h5>{ item.type }</h5>\r\n                        <h6>{ item.id }</h6>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n}\r\n\r\nexport default Home\r\n\r\n","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport BaseLayout from './components/BaseLayout'\nimport Home from './components/Home'\n\n\n\nfunction App() {\n  return (\n        <BrowserRouter>\n          <BaseLayout>\n              <Route exact path = '/' component = {Home}/>\n          </BaseLayout>\n        </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}